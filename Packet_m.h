//
// Generated file, do not edit! Created by nedtool 4.6 from Packet.msg.
//

#ifndef _PACKET_M_H_
#define _PACKET_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>Packet.msg:16</tt> by nedtool.
 * <pre>
 * enum PacketType
 * {
 * 
 *     REQ = 0;
 *     DATA = 1;
 * }
 * </pre>
 */
enum PacketType {
    REQ = 0,
    DATA = 1
};

/**
 * Class generated from <tt>Packet.msg:17</tt> by nedtool.
 * <pre>
 * packet Packet
 * {
 *     int type @enum( PacketType );
 *     int sensor; // H
 *     int coords[2]; //LCN coordinates 
 *     int payload; // Sensor read
 *     int size; // Packet size
 *     int tempIndex;
 * }
 * </pre>
 */
class Packet : public ::cPacket
{
  protected:
    int type_var;
    int sensor_var;
    int coords_var[2];
    int payload_var;
    int size_var;
    int tempIndex_var;

  private:
    void copy(const Packet& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Packet&);

  public:
    Packet(const char *name=NULL, int kind=0);
    Packet(const Packet& other);
    virtual ~Packet();
    Packet& operator=(const Packet& other);
    virtual Packet *dup() const {return new Packet(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual int getSensor() const;
    virtual void setSensor(int sensor);
    virtual unsigned int getCoordsArraySize() const;
    virtual int getCoords(unsigned int k) const;
    virtual void setCoords(unsigned int k, int coords);
    virtual int getPayload() const;
    virtual void setPayload(int payload);
    virtual int getSize() const;
    virtual void setSize(int size);
    virtual int getTempIndex() const;
    virtual void setTempIndex(int tempIndex);
};

inline void doPacking(cCommBuffer *b, Packet& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Packet& obj) {obj.parsimUnpack(b);}


#endif // ifndef _PACKET_M_H_

